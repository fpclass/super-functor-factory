-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Please see the README on GitHub at
--   <a>https://github.com/fpclass/super-functor-factory#readme</a>
@package super-functor-factory
@version 2022.0.0.0

module Game

-- | This type enumerates the different colours of lambdas that arrive at
--   the Functor Factory.
data Colour
Purple :: Colour
Red :: Colour
Green :: Colour
Blue :: Colour
Yellow :: Colour

-- | Cells are either empty or contain a lambda of some colour.
data Cell
Empty :: Cell
Lambda :: Colour -> Cell

-- | The conveyor belt is represented as a list of lists of cells.
type Conveyor = [[Cell]]

-- | Represents a position on the conveyor belt where the first component
--   is the coordinate on the x-axis and the second component is the
--   coordinate on the y-axis.
type Pos = (Int, Int)

-- | <a>conveyorWidth</a> is the width of the conveyor belt.
conveyorWidth :: Int

-- | <a>conveyorHeight</a> is the height of the conveyor belt.
conveyorHeight :: Int

-- | <a>lambdaLimit</a> is the maximum number of lambdas that will arrive
--   at the factory after the initial delivery.
lambdaLimit :: Int

-- | <a>profit</a> <tt>positions</tt> calculates the profit for
--   <tt>positions</tt>-many lambdas.
profit :: [Pos] -> Int

-- | <a>isOutsideBounds</a> <tt>pos</tt> determines whether <tt>pos</tt> is
--   outside the boundaries of the conveyor belt and evaluates to
--   <a>True</a> if that is the case or <a>False</a> otherwise.
isOutsideBounds :: Pos -> Bool

-- | <a>isEmpty</a> <tt>conveyor</tt> determines whether all cells on the
--   <tt>conveyor</tt> are empty or not.
isEmpty :: Conveyor -> Bool

-- | <a>makeEmpty</a> <tt>conveyor positions</tt> should turn all cells
--   indicated by the given <tt>positions</tt> to empty cells.
makeEmpty :: Conveyor -> [Pos] -> Conveyor

-- | <a>advanceConveyor</a> <tt>conveyor</tt> should move all lambdas on
--   <tt>conveyor</tt> as close to the end of the conveyor as possible.
advanceConveyor :: Conveyor -> Conveyor

-- | <a>fill</a> <tt>conveyor lambdas</tt> should add new <tt>lambdas</tt>
--   the <tt>conveyor</tt>.
fill :: Conveyor -> [Cell] -> Conveyor

-- | <a>nextMove</a> <tt>conveyor</tt> should determine the next cluster on
--   <tt>conveyor</tt> to process with the goal of maximising the Functor
--   Factory's profit.
nextMove :: Conveyor -> [Pos]
instance GHC.Enum.Bounded Game.Colour
instance GHC.Enum.Enum Game.Colour
instance GHC.Show.Show Game.Colour
instance GHC.Classes.Eq Game.Colour
instance GHC.Show.Show Game.Cell
instance GHC.Classes.Eq Game.Cell
